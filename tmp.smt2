(set-info :Origin "This instance was generated by: BanditFuzz-- an RL fuzzer for SMT solvers" )
(set-info :Author "Joseph Scott, Fed Mora, Vijay Ganesh" )
(set-info :Contact "Joseph Scott, joseph.scott@uwaterloo.ca")
(set-logic QF_BV)
(declare-const bool_0 Bool)
(declare-const bool_1 Bool)
(declare-const bool_2 Bool)
(declare-const bool_3 Bool)
(declare-const bool_4 Bool)
(declare-const bv_0 (_ BitVec 32))
(declare-const bv_1 (_ BitVec 32))
(declare-const bv_2 (_ BitVec 32))
(declare-const bv_3 (_ BitVec 32))
(declare-const bv_4 (_ BitVec 32))
(assert (=> (bvult (bvshl (bvlshr (bvor #b11101000101110110010010001011101 #b10100001000111101000100011111110) (bvand #b10110101001100100010001011001110 #b11100001101001010100101100011011)) (bvshl (bvadd #b11101000010001100100111011111011 #b10011110011000100011100000000101) (bvadd #b11010010000101011010111001100010 #b00100000010001101111011000100100))) (bvneg (bvadd (bvnot #b00000101001001000010011101101011) (bvmul #b00001101100001011101100001010111 #b01000100010110000000000110110101)))) (and (not (or (not bool_4) (not true))) (or (or (bvult #b00100101011000101111010001011111 #b11000110000110000001001100111010) (xor bool_3 true)) (and (or bool_2 false) (and false bool_2))))))
(assert (bvult (bvurem (bvshl (bvshl (bvlshr #b01011010101101011000100011000011 #b10111101110010000101011011110101) (bvurem #b00111010010010100001110000110011 #b10000111111100111010100110110010)) (bvadd (bvlshr #b10010111110101010101101110000010 #b01011100111111100011001000111111) (bvnot #b01011010011110100111011110001110))) (bvand (bvadd (bvnot #b01010010011110100111100100100101) (bvmul #b01100010110001011100000001001101 #b11100000101111100101000000100011)) (bvmul (bvshl #b10011111001101001011001001100110 #b11011001101111000100011010001100) (bvnot #b11110100101110101011000111111100)))) (bvurem (bvnot (bvnot (bvnot #b11101100010010100110110000000101))) (bvneg (bvshl (bvnot #b10010011010100010110000010110111) (bvurem #b01111010110111101101011111000001 #b10101101011101001001001101000000))))))
(assert (not (=> (bvult (bvadd (bvadd #b11101001001110111000110011100011 #b00001000101100111010101110000100) (bvadd #b10111111110001111101110011101011 #b01110111100000110100000100111100)) (bvmul (bvor #b01000101001110111100100000110101 #b00000101000010010111101101011101) (bvneg #b00010100110110110011110011100001))) (and (bvult (bvlshr #b10101110010000010110111101010001 #b01110010010111101110101101100011) (bvlshr #b10100110100110000010100010000100 #b11110000000110111001011010111011)) (not (not bool_4))))))
(assert (not (not (not (xor (or bool_2 bool_2) (and bool_1 bool_4))))))
(assert (bvult (bvneg (bvor (bvudiv (bvand #b10010101011011111100100110111100 #b01101011001011101010001000110000) (bvlshr #b11111101011110011001101001110001 #b11111001000001011110001001000101)) (bvneg (bvudiv #b11000011100011001111111000010010 #b11100100100110001101000101111111)))) (bvadd (bvor (bvand (bvshl #b00100000011000111011001001100101 #b10001001111010000000101111001001) (bvadd #b01011111000110001010001110100101 #b10010110111010110101011011111101)) (bvor (bvudiv #b00111111111100111000101001001111 #b11001001001111010110110000011110) (bvmul #b00001010011011101011110010000010 #b01000110010011101110111001110110))) (bvshl (bvlshr (bvneg #b10100101011111000100111110000010) (bvneg #b00010010110101101000000100011011)) (bvand (bvudiv #b10001010011110111111111100111010 #b01111110000110111011100101010011) (bvshl #b10111010000110101101001101101000 #b00111010100100111110000001001101))))))
(check-sat)
(exit)
