(set-info :Origin "This instance was generated by: BanditFuzz-- an RL fuzzer for SMT solvers" )
(set-info :Author "Joe Scott, Fed Mora, Vijay Ganesh" )
(set-info :Contact "Joe Scott, joseph.scott@uwaterloo.ca")
; solvers/z3.sh
; 	time => 0.04378771781921387
; 	answer => sat
; solvers/cvc4.sh
; 	time => 0.05426454544067383
; 	answer => sat
(set-logic QF_NRA)
(declare-const bool_0 Bool)
(declare-const bool_1 Bool)
(declare-const bool_2 Bool)
(declare-const bool_3 Bool)
(declare-const bool_4 Bool)
(declare-const real_0 Real)
(declare-const real_1 Real)
(declare-const real_2 Real)
(declare-const real_3 Real)
(declare-const real_4 Real)
(assert (or (and (<= real_1 real_2) (> real_4 real_4)) (<= (+ real_4 234708868.35289264) (- real_0))))
(assert (=> (=> (<= (- 959972514.2756501) real_2) (< real_3 real_2)) (> (* (- 319628061.42570925) real_3) (- real_2 (- 57579789.55339515)))))
(assert (and (>= (/ (- 711532814.9658031) real_3) (+ real_4 real_0)) (< (/ 820290475.7739227 506694387.4795797) (+ real_0 real_1))))
(assert (> (+ (/ real_1 (- 983193003.2019112)) (- real_4)) (- (* 868984714.4226992 258670944.77535844) (- 586072308.0887158))))
(assert (=> (xor (>= 657133148.8532529 (- 898768547.6366434)) (or bool_1 bool_4)) (not (or bool_2 false))))
(check-sat)
(exit)
