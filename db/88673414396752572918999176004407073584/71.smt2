(set-info :Origin "This instance was generated by: BanditFuzz-- an RL fuzzer for SMT solvers" )
(set-info :Author "Joe Scott, Fed Mora, Vijay Ganesh" )
(set-info :Contact "Joe Scott, joseph.scott@uwaterloo.ca")
; solvers/z3.sh
; 	time => 0.1669156551361084
; 	answer => err
; solvers/bitwuzla.sh
; 	time => 0.11802864074707031
; 	answer => err
; solvers/cvc4.sh
; 	time => 0.13086438179016113
; 	answer => err
(set-logic QF_BV)
(declare-const bool_0 Bool)
(declare-const bool_1 Bool)
(declare-const bool_2 Bool)
(declare-const bool_3 Bool)
(declare-const bool_4 Bool)
(declare-const bv_0 (_ BitVec 8))
(declare-const bv_1 (_ BitVec 8))
(declare-const bv_2 (_ BitVec 8))
(declare-const bv_3 (_ BitVec 8))
(declare-const bv_4 (_ BitVec 8))
(assert (bvsgt (bvlshr (bvshl bv_4 #x000000d1 ) (bvxor bv_2 bv_1)) (bvurem (bvnand bv_2 #x000000a1 ) (bvnand bv_0 #x000000d0 ))))
(assert (xor (and (and false bool_1) (not bool_2)) (bvuge (bvxnor bv_3 bv_1) (bvxnor bv_1 #x000000a9 ))))
(assert (bvsgt (bvnor (bvsub bv_0 #x000000df ) (bvlshr bv_3 bv_0)) (bvsub (bvsrem #x000000dd  bv_0) (bvsub #x00000018  bv_2))))
(assert (bvule (bvnand (bvlshr bv_2 #x0000006d ) (bvmul bv_1 #x0000002e )) (bvxor (bvashr #x000000cd  bv_4) (bvsrem #x0000003e  bv_2))))
(assert (and (=> (xor true bool_1) (xor bool_0 bool_1)) (bvugt (bvxor bv_1 #x000000a0 ) (bvsdiv #x00000031  #x00000037 ))))
(check-sat)
(exit)
