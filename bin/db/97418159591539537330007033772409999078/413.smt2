(set-info :Origin "This instance was generated by: BanditFuzz-- an RL fuzzer for SMT solvers" )
(set-info :Author "Joe Scott, Fed Mora, Vijay Ganesh" )
(set-info :Contact "Joe Scott, joseph.scott@uwaterloo.ca")
(set-logic QF_BV)
(declare-const bool_0 Bool)
(declare-const bool_1 Bool)
(declare-const bool_2 Bool)
(declare-const bool_3 Bool)
(declare-const bool_4 Bool)
(declare-const bv_0 (_ BitVec 32))
(declare-const bv_1 (_ BitVec 32))
(declare-const bv_2 (_ BitVec 32))
(declare-const bv_3 (_ BitVec 32))
(declare-const bv_4 (_ BitVec 32))
(assert (and (or (and true true) (=> true bool_0)) (and (bvsle bv_4 bv_4) (bvuge #xf9946384  #x9f973cfc ))))
(assert (bvuge (bvnor (bvand bv_1 #x97ccc9c9 ) (bvnand bv_1 #x6720af3a )) (bvor (bvand bv_2 #x5fc55490 ) (bvsub #x66d3235e  bv_0))))
(assert (not (and (bvuge bv_3 #x1e4ad05a ) (bvsge bv_4 bv_3))))
(assert (bvslt (bvashr (bvnor #x8b1e0e52  #x65732aef ) (bvsmod bv_3 bv_3)) (bvxnor (bvnor #x0404e963  bv_4) (bvsdiv bv_4 #x0a269da2 ))))
(assert (=> (bvuge (bvudiv bv_2 bv_1) (bvand bv_1 bv_1)) (not (xor false false))))
(check-sat)
(exit)
