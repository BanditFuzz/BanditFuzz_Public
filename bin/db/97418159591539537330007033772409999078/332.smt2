(set-info :Origin "This instance was generated by: BanditFuzz-- an RL fuzzer for SMT solvers" )
(set-info :Author "Joe Scott, Fed Mora, Vijay Ganesh" )
(set-info :Contact "Joe Scott, joseph.scott@uwaterloo.ca")
(set-logic QF_BV)
(declare-const bool_0 Bool)
(declare-const bool_1 Bool)
(declare-const bool_2 Bool)
(declare-const bool_3 Bool)
(declare-const bool_4 Bool)
(declare-const bv_0 (_ BitVec 32))
(declare-const bv_1 (_ BitVec 32))
(declare-const bv_2 (_ BitVec 32))
(declare-const bv_3 (_ BitVec 32))
(declare-const bv_4 (_ BitVec 32))
(assert (not (xor (or true true) (or bool_1 bool_1))))
(assert (bvugt (bvlshr (bvsdiv bv_2 bv_3) (bvsmod #xc19112b9  bv_1)) (bvnand (bvmul #x6865a0f1  bv_4) (bvxnor bv_3 #x0fb2df5b ))))
(assert (and (=> (bvule bv_2 #x3fa66dfc ) (bvugt bv_2 #x99fab996 )) (bvsge (bvmul bv_4 bv_0) (bvurem bv_1 #x3b692f4e ))))
(assert (or (bvsgt (bvshl bv_2 #x1570000f ) (bvashr #xa58ca9b0  bv_0)) (and (xor true bool_4) (bvult #xdc511842  bv_0))))
(assert (xor (bvult (bvlshr bv_2 bv_0) (bvshl bv_4 #x66c7dda1 )) (=> (bvule bv_0 bv_3) (bvsgt #x3ade5c2d  #xea79e7ad ))))
(check-sat)
(exit)
