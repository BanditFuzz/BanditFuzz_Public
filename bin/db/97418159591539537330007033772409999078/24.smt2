(set-info :Origin "This instance was generated by: BanditFuzz-- an RL fuzzer for SMT solvers" )
(set-info :Author "Joe Scott, Fed Mora, Vijay Ganesh" )
(set-info :Contact "Joe Scott, joseph.scott@uwaterloo.ca")
(set-logic QF_BV)
(declare-const bool_0 Bool)
(declare-const bool_1 Bool)
(declare-const bool_2 Bool)
(declare-const bool_3 Bool)
(declare-const bool_4 Bool)
(declare-const bv_0 (_ BitVec 32))
(declare-const bv_1 (_ BitVec 32))
(declare-const bv_2 (_ BitVec 32))
(declare-const bv_3 (_ BitVec 32))
(declare-const bv_4 (_ BitVec 32))
(assert (bvsgt (bvadd (bvsub bv_2 bv_3) (bvmul bv_4 #x7e544255 )) (bvshl (bvsmod bv_4 bv_2) (bvlshr bv_1 bv_2))))
(assert (or (xor (xor bool_1 bool_1) (not true)) (bvuge (bvsmod #x36895c7d  #xacd9ecff ) (bvxnor bv_0 bv_0))))
(assert (=> (bvule (bvsub bv_0 #xff7354fa ) (bvand bv_2 #x48daa40d )) (not (bvsge bv_2 bv_2))))
(assert (bvsle (bvshl (bvurem #x4779dc15  #x4dd3d655 ) (bvnor #x4f8990b7  #x83a64b15 )) (bvxnor (bvxor #x3e86e065  bv_3) (bvsrem #x0b66ee15  #x9ed2c45b ))))
(assert (=> (and (bvult bv_3 bv_3) (xor true false)) (or (xor false false) (or false bool_4))))
(check-sat)
(exit)
